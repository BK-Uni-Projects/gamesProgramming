= Simulation and Time
shearer12345
:stem: latexmath

:imagesdir: ./assets/
:revealjs_customtheme: "reveal.js/css/theme/white.css"
:source-highlighter: highlightjs

== Simulation

* Changing a model over time
* In general all game physics is fakery
  ** i.e. a "model" of how things change - not 100% correct
* We have choices about how much we fake things
* And choices about efficient algorithms etc

=== Step-by-step

* In games almost always step-by-step
  ** a few cases we can compute results directly, with timesteps (see later)

=== Constraints

* Simulating in real-time means making larger approximations
  ** CPU/GPU constraints
  ** We may be happy with larger errors for lower computational cost
* Simulation inevitably requires some mathematics
  ** stem:[=>] programmer mathematics ability may influence the choice/implementation of techniques

== Technical terms

* Time
* Length
* Position
* Velocity
* Speed
* Acceleration
* Mass
* Force

=== Time

* A measure of duration
* A scalar (single dimensional / not a vector / has no direction)
* Units are seconds: (stem:[s])
* Usual symbol is stem:[t]
* e.g. stem:[t = 4.3s]

=== Length

* A measure of space
* Units are metres: (stem:[m])
* e.g. stem:[l = 3.6m]

=== Position

* Where in space a point is, relative to some base point
* Units are metres: (stem:[m])
* A vector (stem:[m] on each axis)
* Usual symbol is stem:[\vec{p}] or stem:[\vec{r}]
* e.g. stem:[\vec{p} = (2.3, 4.5)]

=== Velocity

* The rate of change of position over time (derivative)
* Units are metres per second: stem:[\frac m s] (also stem:[m s^{-1}])
* A vector (stem:[m s^{-1}] on each axis)
* Usual symbol is stem:[\vec{v}]
* e.g. stem:[\vec{v} = (0.4, 2.3){m s^{-1}}]

=== Speed

* Magnitude of velocity: stem:[|v|]
  ** i.e. independent of the direction
* Units are also metres per second: stem:[\frac m s] (also stem:[m s^{-1}])
* A scalar (has no direction)
* e.g. stem:[speed = 2.33{m s^{-1}}]
* Can compute from velocity - (and reverse if have the direction)

=== Computing Speed

* Magnitude of a vector is its length
* How do we compute the length of vector?
[%step]
  ** Square root of the sum of the squares

=== Computing Speed 2D

* if stem:[\vec{v} = (x, y)]
  ** stem:[|v| = \sqrt{x^2 + y^2}]
* if stem:[\vec{v} = (0.4, 2.3)]
  ** stem:[|v| = \sqrt{0.4^2 + 2.3^2} = 2.33]

=== Computing Speed 3D

* if stem:[\vec{v} = (x, y, z)]
  ** stem:[|v| = \sqrt{x^2 + y^2 + z^2}]
* if stem:[\vec{v} = (0.4, 2.3, 3.2)]
  ** stem:[|v| = \sqrt{0.4^2 + 2.3^2 + 3.2^2} = 3.96]


=== Acceleration

* The rate of change of velocity over time (derivative)
* Units are metres per second per second: stem:[\frac m {s^2}] (also stem:[m s^{-2}])
* A vector (stem:[m s^{-2}] on each axis)
* Usual symbol is stem:[\vec{a}]
* e.g. stem:[\vec{a} = (0.4, 2.3){m s^{-2}}]

=== Mass

* A measure of resistance to change of For every action there is an equal and opposite reaction.

If two objects bump into each other they will react by moving apart.motion when a force is applied
* Is NOT the weight of an object (that depends on gravitational pull)
* Units are stem:[kg]
* A scalar (has no direction)
* Usual symbol is stem:[m]
* e.g. stem:[m = 45.3kg]

=== Force

* Causes objects to change velocity (when unopposed)
* Units are Newtons: (stem:[N])
* A vector - has direction as well as magnitude
* Usual symbol is stem:[F]
* e.g. stem:[F = 153.3N]

== Vectors

* Vectors are a good representation
* Easy to understand
* Moving from 2D to 3D is easier
* Efficient for processing

=== Magnitude and direction

* You can always computed magnitude and direction from a vector
* Using magnitude and direction is hard work
* Using magnitude and direction frequently means using stem:[sin] and stem:[cos]
  ** which are relatively expensive operations



== Units

* Use *SI* Units
  ** International System of Units (Système international d'unités, SI)
* Will make your life *MUCH* easier
  ** avoid inches, miles

== Newton’s Laws of Motion

* What are they?

=== Newton’s First Law of Motion

* Every object in a state of uniform motion tends to remain in that state of motion unless an external force is applied to it
  ** also indicates that if an object is at rest (not moving) it will remain at rest

=== Newton’s Second Law of Motion

* A force is applied only to the concept we commonly call acceleration
* An object's mass, acceleration, and the applied force may be represented by
  ** stem:[\LARGE F = ma]

=== Newton’s Third Law of Motion

* For every action there is an equal and opposite reaction
* If two objects bump into each other they will react by moving apart


== Using acceleration in your game

* Some representation of velocity in your game is vital for objects to move (new positions calculated from old positions, velocity and time)
* You don't have to use acceleration
  ** your game could set velocity values directly
  ** this is unrealistic (compared to real world), but frequently doesn't matter
    *** e.g. changing from not moving to travelling at stem:[5{m s^{-1}}] instantly is an infinite acceleration


== Simulation steps (finally)

* If we know the position and velocity of an object we can calculate its position some time later
  ** stem:[\vec{p'} = \vec{p} + \vec{v} * \Delta t]
  ** this is called integration
* This works just fine as long a stem:[\vec{v}] is constant throughout stem:[\Delta t]

=== Simulation steps (simple code)

[source, cpp]
----
position = position + velocity * dt;
----

=== Smaller simulation steps

* Assuming velocity is constant through a simulation step is frequently wrong
* The impact of the incorrect assumption can be mitigated by:
  . reducing the duration of the time step
  . using a more sophisticated form of integration (e.g. Runge-Kutta 4)

See also: http://gafferongames.com/game-physics/integration-basics/


=== Changing velocity over time

* Just as we can change position according to velocity we can change velocity according to acceleration
  ** stem:[\vec{v'} = \vec{v} + \vec{a} * \Delta t]
* Assumes that stem:[\vec{a}] is constant throughout stem:[\Delta t]

=== Changing velocity, Changing position

* Usual practice is to use acceleration to calculate new velocities
* THEN use those new velocities to calculate new positions


== Time and time-steps

* It's important to be able to obtain the real time in games
  ** so that we can make sure we simulate and render appropriately

=== Seconds vs. Milliseconds

* *many* *many* engines/libraries use milliseconds as their base unit of time
  ** including SDL2 - grrr - image:emoticons/Smiley_green_alien_GRRR.svg[height=100]
* Why?
[%step]
  ** for many purposes milliseconds is enough precision
  ** for many purposes time in stem:[ms] can be represented by an integer

=== Use Seconds

* Using stem:[seconds] everywhere is my *strong* recommendation
* possibly worth wrapping functions/methods that use stem:[ms] to use stem:[seconds]

=== SDL_GetTicks

* SDL_GetTicks() gives you the number of milliseconds since the SDL library initialization (as 32 bit int)
* How many milliseconds per frame
  ** at 60fps?
  ** at 100fps?
  ** at 120fps?

=== C++11 - chrono

[source, cpp]
----
#include <iostream>
#include <chrono>
typedef std::chrono::high_resolution_clock Clock;

int main()
{
    auto t1 = Clock::now();
    auto t2 = Clock::now();
    std::cout << "Delta t2-t1: "
              << std::chrono::duration_cast<std::chrono::nanoseconds>(t2 - t1).count()
              << " nanoseconds" << std::endl;
}
----

http://stackoverflow.com/questions/26440860/sdl-getticks-accuracy-below-the-millisecond-level

=== Simulate at render-rate?

* Your speed of render will be variable
  ** across machines
  ** over time
* Track how long it has been since the last render and simulate that length of time
  ** what happens if no-vsync
  ** ??

=== Fix your time step???

* Adjusting your simulation rate to vary with render rate is non-deterministic
  ** for networking and test determinism in important (more next year)
  ** you could simulate with a fixed time step
  ** http://gafferongames.com/game-physics/fix-your-timestep/




== Simulation correctness (the rare case)

* Only in *some* situations the future may be calculated analytically
  ** for very simple models (or parts of a more complex model)
  ** e.g. determine analytically when a ball will hit the floor

=== Equations for a falling body

* Assuming constant acceleration
* Assuming no air resistance

=== Equations for a falling body 2

* Distance stem:[d] travelled by an object falling for time stem:[t]:

stem:[d=\frac{1}{2}(g*t^2)]

* Time stem:[t] taken for an object to fall distance stem:[d]:

stem:[t =\ \sqrt {\frac{2d}{g}} ]

https://en.wikipedia.org/wiki/Equations_for_a_falling_body

=== Distance (d) travelled by an object falling for time (t)

* let's assume t is 2 seconds
* what is g?

stem:[d=\frac{1}{2}(g*t^2)]

* => d = ???


=== Distance (d) travelled by an object falling for time (t) 2

* let's assume t is 2 seconds
* what is g?
  ** force/acceleration due to gravity
  ** = 9.81 meters per second per second

=== Distance (d) travelled by an object falling for time (t) 3

* t = 2.00
* g = 9.81

stem:[d=\frac{1}{2}(g*t^2)]

* => d = 19.62 meters !!

=== Time (t) taken for an object to fall distance (d)

* g = 9.81
* d = 54 meters (height of the Leaning Tower of Pisa)

stem:[t =\ \sqrt {\frac{2d}{g}} ]

* => t = ???

=== Time (t) taken for an object to fall distance (d) 2

* g = 9.81
* d = 54 meters (height of the Leaning Tower of Pisa)

stem:[t =\ \sqrt {\frac{2d}{g}} ]

* => t = sqrt(2 × 54) / (9.81) = 11.01)
* => t = 3.32



== Simulation incorrectness (the normal case)

* the vast majority of game simulations cannot be solved analytically
  ** see three-body problem (" no general analytical solution for the three-body problem") - https://en.wikipedia.org/wiki/Three-body_problem
* so we solve instead by taking time steps
  ** and assuming (usually incorrectly) that some properties don't change during that step
  ** this means that our simulations are *INCORRECT*

== Problems due to simulation incorrectness

* incorrect gain (or loss) of energy in the system
  ** leading to instability / blowing up




== Workshop activities 1

* use SDL_GetTicks to measure how long each frame takes to render
  ** print to console
* disable vsync (in driver) and repeat
  ** what happens to the time?
  ** what happens to CPU usage?
  ** what's going on

== Workshop activities 2

* use std::chrono::high_resolution_clock to measure frame times
* modify your game so that it simulates the correct amount of time per frame

== Workshop activities 3

* make a sprite that orbits (like the Earth) around the centre of the screen (the Sun)
  ** you could also render the Sun if you like
* it should have a starting velocity perpendicular to the direction of the sun
  ** at right-angles to the sun
  ** easy if you start it right above, or right below the sun
* it should have an acceleration towards the Sun proportional to the distance
  ** correctly inversely proportional to the square of the distance
  ** the mass of the "sprite" doesn't matter in this case - why not?

== Workshop activities 4

* adjust the starting velocity so the Earth doesn't immediately:
  ** crash into the Sun
  ** fly off into space
* tweak that value to maintain the orbit for longer
* what happens if you do two simulation steps each frame, each of half the length of time?
  ** or 4 steps, each a 1/4 of the time?
