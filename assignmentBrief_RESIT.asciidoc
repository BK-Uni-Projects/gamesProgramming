= Games Programming Assignment Brief RESIT 2015-16
shearer12345

:imagesdir: ./assets/
:revealjs_customtheme: "reveal.js/css/theme/white.css"
:source-highlighter: highlightjs

[.clearfix]
--
[.left]
image::Chuckie_Egg_on_BBC_Micro.jpg[height=288]

[.right]
image::Pac-man.png[height=288]
--

== Overview

NOTE: you may re-use and extend your submission for the normal assignment for the resit.

NOTE: Please read this whole document

* Single, 100% assignment
* Build a complete game that demonstrates both:
  ** Games Programming capabilities (i.e. high quality code)
  ** Specific Games Programming techniques we've covered in class
* Space for personal expression and portfolio

=== Assignment specifically - 2015-16

* Clone an existing game
  ** Drones vs. Battleships
  ** Chuckie Egg
  ** PacMan / Ms PacMan

=== Drones vs. Battleships

* Visual design up to you (and not important for marks)
* Main battleships logic should be a strict clone (wikipedia)
* The control of where to drop bombs should be with simulated drones
  ** This introduces both real-time simulation and real-time multi-player to the game

=== Drones vs. Battleships - drones

* Player 1 and Player 2 each have an attack drone and a defense drone
* Player 1's attack drone is over Player 2's ships, and vice versa
* Defense drones are above their own player's ships
* When it is a player's move their can move their attack drone
  ** otherwise they can move their defense drone

=== Drones vs. Battleships - drones 2

* Drones bounce off each other
* Drones bounce off world boundaries
* Drones cannot be destroyed
* Drones drop bombs in the nearest "cell", but can be at any point in 2-space
  ** i.e. a drone could be at position (2.3, 4.76), but it's bomb would only impact in a single cell

=== Drones vs. Battleships - battleships

* How players set the positions for their battleships is up to you
  ** you could use drones to place them
  ** or keyboard input
  ** or mouse input

=== Chuckie Egg and PacMan / Ms PacMan

* Approximately the same logic
* Add logic for 2-player if you implement that
* Assets
  ** can be from the game (won't be able to publish)
  ** draw your own (marks aren't for asset quality)
  ** find your own (many open-licensed assets sources on the web)

=== Starting point

* A starting point git repository will be made available to you (https://github.com/shearer12345/sdl2template)
* It includes:
  ** a premake script to setup your build system
  ** the required libraries
  ** some of the optional libraries - others you will need to obtain and configure premake for yourself

== Toolset (required)

* You *MUST* use C/{cpp} for this assignment (required)
  ** You *CANNOT* use code from tutorial sites, even with attribution
* You *MUST* use SDL2 for this assignment
  ** You *CANNOT* use freeGLUT, GLFW, or SFML
* You *MUST* use SDL2_image
* You *MUST* use SDL2 OR SDL_mixer for audio (if you have audio)


=== Toolset (optional libraries - graphics)

* You may use OpenGL and GLEW if you wish
* You may use GLM if you wish
* You may use SDL_ttf for font generation

=== Toolset (optional libraries - networking)

* For networking, you may use any of the following:
  ** SDL_net - https://www.libsdl.org/projects/SDL_net/
  ** zeroMQ - any version - http://zeromq.org/
  ** netLink - https://github.com/Lichtso/netLink

=== Toolset (optional libraries - serialisation)

* For serialisation
  ** Any serialisation libraries from http://fffaraz.github.io/awesome-cpp/#serialization
  ** Any json libraries from http://fffaraz.github.io/awesome-cpp/#json
  ** Any XML libraries from http://fffaraz.github.io/awesome-cpp/#xml

=== Toolset (optional libraries - other)

* Other libraries *MUST* be confirmed with me (Shearer)
* You *CANNOT* use a physics library

=== Support Tools (recommended)

* Build off the provided starting point (you don't have to)
* premake5 for creating a solution
* Versioning - git, or other
* Backup - github, gitlab, bitbucket, or other


== Plagiarism etc

* Must be your code
  ** Not from tutorial sites (except from my examples)
    *** even if you attribute it
  ** Not from each other

== Submission

* Two submission parts
  . a PDF to Blackboard (to Assessment Item 1 Upload)
  . a single ZIP to Blackboard (to Assessment Item 1 Supporting Documentation Upload)

=== PDF

* providing a bulleted list of libraries used
* providing a bulleted list of the features implemented from the CRG, in order of their appearance in the video
  ** Extra features should also be on this list (with a small description if needed to make the feature clear)

=== ZIP

* All game source, and assets, and binaries
* A video of your game in action

=== ZIP (source)

* All game source - .{cpp}, .c, .h, .hpp
* All assets - images, levels, audio, sprite description files, etc
* All binaries - dlls, exe
* not marked directly, but this is the evidence chain and plagiarism check


=== ZIP (video)

* showing each of the features listed in your PDF (the PDF should list features in order of appearance)
* at least 30 seconds long, capturing the whole screen
* using a screen capture tool (e.g. Open Broadcaster Software (OBS), Fraps)
  ** except for multiplayer on multiple PCs - that feature can be recorded using a video/phone camera and be a separate video
* appropriately compressed (i.e. not 500MB+ files) (OBS will do this for you by default)

=== Presentation errors

* Submissions not matching the above will be treated as submission errors
  ** see Presentation Regulations on Blackboard for penalties

== Happy working

:-)

* ask for clarification for any assignment questions (earlier is better)

== References

* https://en.wikipedia.org/wiki/Chuckie_Egg
* https://en.wikipedia.org/wiki/Pac-Man
* https://en.wikipedia.org/wiki/Battleship_%28game%29
