= Serialization
shearer12345
:stem: latexmath

:imagesdir: ./assets/serialization
:revealjs_customtheme: "reveal.js/css/theme/white.css"
:revealjs_history: true
:source-highlighter: highlightjs

== Summary

* Serialization briefly
* Challenges in Serialization
* Libraries
* Practical considerations



== Serialization briefly

* Converting an *in-memory* representation to/from a form that we can write to a file or send over a network
  ** that form is a sequence of bit or bytes
* Usually, we want to be able to (re)construct an object from its serial form
* File formats are one form of serialization

== Serialization and other names

* AKA:
  ** Marshalling (https://en.wikipedia.org/wiki/Marshalling_%28computer_science%29#Comparison_with_serialization[subtly different])
  ** Pickling (Python)
  ** Flattening

== Standard formats vs Standard Generic formats

* For this talk it's important to make a distinction between the above
* Standard formats - those for specific contexts
  ** e.g. image formats, such as `jpg`
* Standard Generic formats: Those for generic context, but which still have an standard format
  ** e.g. XML, JSON

Note: this terminology is made-up. Suggest something better

=== Standard formats vs Standard Generic formats 2

* We'll discuss both here, but practically we're mostly interested in the Standard Generic formats
  ** We'll delegate Standard formats to libraries

== Common kinds of data for serialize/deserialize (in games)

(incomplete list)

* Images / Textures
* Audio
* Video

=== Common kinds of data for serialize/deserialize (in games) 2

* Node hierarchy
* Geometry
* Animation data (key-frames)
* Shaders
* Cameras

=== Common kinds of data for serialize/deserialize (in games) 3

* Game state
  ** player positions (probably in the node hierarchy)
  ** Scores
  ** Health (possibly in the node hierarchy)
  ** ...

=== Common kinds of data for serialize/deserialize (in games) 4

* Code!!
  ** interpretable code
  ** Virtual Machine code (http://fabiensanglard.net/quake3/qvm.php[Quake 3 delegates much of its internal to a custom VM (QVM)])
  ** Dynamically linked code
  ** Updates?

=== Common kinds of data for serialize/deserialize (in games) 5

* We should mostly try to use Standard formats
* Inevitably there will be cases where we need a custom format
  ** usually, we want to use a Standard Generic format for that
    *** e.g. JSON, XML, Thrift, Protocol Buffers
  ** occasionally, we may need some custom

== Challenges in Serialization

* Standardization of formats
* Text vs. Binary formats
* Representing the data structures
  ** Inheritance hierarchies
  ** Pointers/References
    *** trees
    *** acyclic graphs with joins only at leaves
    *** graph (cyclic, arbitrary joins))

=== Challenges in Serialization 2

* Escape sequences
* Schemas and versions
* Endianness
* Compression

== Standard formats

* You've no doubt come across many Serialization formats before
  ** any format where the data you're interested in isn't just linear/serial data (and even then)
* There are literally thousands of standards
  ** in Windows world, every different file ending is (usually) a different file format

=== Standard formats 2

* Even for common types of data (e.g. images) choosing the format is non-trivial
* Almost every format has trade offs, e.g.
  ** `jpg` can highly compresses the image, creating small files
    *** usually smaller than `png`
  ** `jpg` looses information important for some situations (especially fonts)
  ** `jpg` has a lot of related patents
  ** `jpg` doesn't support transparency
  ** not all `jpg` libraries can decode all `jpg` images
  ** production/asset pipeline at Studio XX is using `???`

=== Standard formats 3

* Not all files in a standard format may be compliant with that standard
* Some tools may embed extra (perhaps important) data in the standard format
  ** your library may not extract that
  ** e.g. EXIF data in images

=== Standard formats, some examples

* You've probably come across some of these before
  ** JPEG, PNG, TARGA, TIFF
  ** AVI, MPEG, mp3
  ** 3DS, OBJ, SVG, OBJ
  ** DOCX, PPTX, DOC, PPT
  ** HTML, CSS, JS

== Standard Generic formats, some examples

* You've probably come across some of these before
  ** JSON
  ** CSV,
  ** XML,
  ** Protocol Buffers
  ** MsgPack

== Text vs. binary formats

* AKA: Human-readable vs. non-human-readable

=== Text Formats

* Text formats use ASCII, or Unicode to represent data
  ** size of the data type and endianness don't matter
  ** easier for debug/check/read (open in a text editor)
  ** tends to be larger
  ** can, *sometimes* compress to a similar size

=== Binary

* Binary formats represent the data directly as bits/bytes
  ** often these bits/bytes may relate closer/exactly to the bits/bytes that will be/were in RAM
  ** typically, faster to load (usually, *lots* faster)
  ** endianness problems
  ** usually smaller files



== File endings, Magic tags, ...

* Any file is just a stream of bits/bytes and a file name
* Any message we receive through the network is just a series of bits/bytes
* How do we know what that data represents?
  ** What format it is in?
* Perhaps we know from some other context (i.e. we asked for data in some format)
* Frequently, especially with files, we don't know

=== File endings, Magic tags, ... 2

* The end of a file (after the last `.`) might help us
  ** but is not guaranteed
* We may have been told through the protocol (common in Web) (Mime-types)
  ** not guaranteed
* There may be a magic string (signature) in the byte stream
  ** https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_header
  ** not guaranteed
* We may have to guess, or try to different deserializers till we get something that `works`
  ** e.g. try to load what we think is an image with a `jpg` decoder, perhaps it will work

=== File endings, Magic tags, ... 3

image::PNG-Gradient_hex.png[PNG signature, height=600, link=https://commons.wikimedia.org/wiki/File:PNG-Gradient_hex.png]

https://en.wikipedia.org/wiki/Portable_Network_Graphics#File_header

=== File endings, Magic tags, ... 4

* We can guarantee that deserialisation will always work
* BUT, we can improve the likelyhood
  ** ...



== Serialization and compression

* Compression is the process of trying to represent a bit stream in as fewer bits as possible
  ** possibly in a *lossy* manner
* Serialization and compression tend to be highly interlinked
* If we know the context of the data (what it is, what we need to use it for) we can usually compress better
  ** but this may be overkill - profile before optimization
* We can always do generic compression on a bit stream
  ** it just may not compress very much

=== Serialization and compression - a brief case-study

* `.docx` files are a standard document file format
* these files are just a special `zip` file
  ** Office Open XML
  ** a zip with XML files in it
  ** and with some non-XML content (foreign resources)
    *** images, video, ...




== Language support for Serialization

* {cpp} doesn't have direct support for serialization
* There are many libraries for standard formats
* There are many libraries for standard generic formats
  ** http://fffaraz.github.io/awesome-cpp/#serialization
  ** http://fffaraz.github.io/awesome-cpp/#json
  ** http://fffaraz.github.io/awesome-cpp/#xml



== Serialization between languages

* Not all languages support the same features and different machines may have different internal representations
  ** Javascript has only 64-floating point (no ints, no 32-bit floats)
  ** https://en.wikipedia.org/wiki/Endianness[Big-Endian vs. Little-Endian]
* Also:
  ** languages come and go
  ** languages evolve



== Libraries vs. Custom Serialization vs. ???

* There are many, varied libraries that support/allow Serialization
* Sometimes writing your own is easier?
  ** maybe?
  ** especially with Deserializers
    *** some part of your production pipeline may have data in some unusually (made up, ...) format
    *** Twisting a Serialization library to deal with that may be difficult

=== Libraries vs. Custom Serialization vs. ???

* Most libraries will let you do custom serialization within the library




== Schema and Versions

* Given we need to (re)construct objects from a bit stream, we need to know the relationship between the bit stream and our objects
* A schema defines this relationship
* The schema may be:
  ** implicit in our code
  ** explicit in some documentation
  ** explicit in a machine readable format
    *** sent with each file/message
    *** or shared separately

=== Schema and Versions 2

* Schemas (Schemata) change over time
  ** your scheme should encode a version (somehow!!!!)
* Perhaps you want to put new/different data in your format
* Perhaps your format is auto-generated from your code, and your objects have changed
* What about files/message from an older/different schema
  ** forwards/backwards compatibility




== Serialization and security

* Data from any outside source shouldn't be trusted!
  ** network
  ** file system
    *** perhaps you trust files installed by your programs installer
    *** which should be only accessible to your program
    *** except for the administrator(s) ...
* Outside our scope here


== Serialization and Computational cost

* Both serialization and deserialization can be computationally expensive
  ** as can compression/decompression
* Libraries are probably good at this
* We should profile to see if this is a problem.
* Where real-time is an issue, we should take that into account


== Practical Serialization

. Delegate to a library
. Optimize when you have (after profiling)
. Use Standard formats where possible
  . then use Standard Generic formats where possible
. Serializing just *changes*??

=== Practical Serialization

* As our games become more generic, more game-engine like, we would like to serialize in more Standard formats
* There is a trade-of between Standard formats and Standard Generic formats
  ** the former may be needlessly complex for our needs
  ** for our learning, and practically for this module, we'll look at using Standard Generic formats

== Cereal

* http://uscilab.github.io/cereal/

[quote, Cereal Docs, http://uscilab.github.io/cereal/]
----
cereal is a header-only C++11 serialization library. cereal takes arbitrary data types and reversibly turns them into different representations, such as compact binary encodings, XML, or JSON. cereal was designed to be fast, light-weight, and easy to extend - it has no external dependencies and can be easily bundled with other code or used standalone.
----


=== Cereal

* Cereal can use XML, JSON, or its own binary format
* Cereal can serialize C++ base types automatically
* Cereal can serialize C++ standard library class automatically (std::vector)
* Cereal can serialize smart pointers
* It's easy to make Cereal serialize your own classes

== Other Reading

* https://isocpp.org/wiki/faq/serialization
* http://gafferongames.com/building-a-game-network-protocol/

== Workshop activities 1

* Download the Cereal library, or select another
  ** http://fffaraz.github.io/awesome-cpp/#serialization
  ** http://fffaraz.github.io/awesome-cpp/#json
  ** http://fffaraz.github.io/awesome-cpp/#xml

=== Workshop activities 2

* `#include` the library
  ** for other libraries you may also need to modify premake for libraries, and dlls

=== Workshop activities 3

* serialize the following to some file, then deserialize each (use XML or JSON). Look at the generated files
  ** an int
  ** a float
  ** a list of float
  ** your own class
  ** a list of your own classes

=== Workshop activities 4

* repeat for each, in a binary format. Compare the file sizes
