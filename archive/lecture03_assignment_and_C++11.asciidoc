= Assignment and {cpp}11
shearer12345

:imagesdir: ./assets
:revealjs_customtheme: "reveal.js/css/theme/white.css"
:source-highlighter: highlightjs

image::Chuckie_Egg_on_BBC_Micro.jpg[]

== Overview

* Assignment - more detail
* Workshops wrt assignment#
* {cpp} and {cpp}11

== Assignment

* Single, 100% assignment
* Build a complete game that demonstrates both:
  ** Games Programming capabilities (i.e. high quality code)
  ** Specific Games Programming techniques we've covered in class
* Space for personal expression and portfolio

=== Assembling a toolset

* {cpp} (required)
* SDL2 (required)
* OpenGL and GLEW (optional)
* premake5 (recommended)
* git (recommended)
* Build off the https://github.com/shearer12345/graphicsByExample/tree/master/src/sdl_noOpenGL[sdl_noOpenGL] example

=== Plagiarism etc

* Must be your code
  ** Not from tutorial sites (except from my examples)
  ** Not from each other
* Other libraries from the SDL2 must be confirmed with me (Shearer)

=== Assignment specifically

* Clone an existing game
  ** Battleships
  ** Chuckie Egg
  ** Up to you as a class

=== Brief and CRG

  * I'm *AIMING* for brief and CRG out this week - the above and here is a rough guide. Giving this now, to emphasis value of workshops
  . Code quality / structure
  . Complete Game features
  . Animation (Sprites etc)
  . Movement, Physics, Collisions
  . Sound
  . Multiplayer

=== Battleships

* Visual design up to you (and not important for marks)
* Logic should be a strict clone (wikipedia)
* https://www.youtube.com/watch?v=k4kc_rqsP5I

=== Chuckie Egg

* Approximately the same logic
* Add logic for 2-player
* Assets
  ** can be from the game (though you won't be able to publish your version)
  ** draw your own (marks aren't for asset quality)
  ** ...

=== Another 2D game

* Class choice
* Should be reasonable simple
* Discuss in groups for 5 minutes
  ** Write your choice on paper and give to me
* Then we'll vote

=== Starting point??

* Would you like a fresh, single example repository to start from?



== Workshops feeding assignment

* Workshop activities are setup to feed the assignment in 3 ways
  . General Games Programming Skills
  . Specific Games Programming Skills
  . A set of Games Programming resources/modules/classes

=== Working beyond the workshops

* The workshops only start you in the directions
* To be useful towards your assignment (and learning) you should work beyond the workshop
  ** to consolidate your understandings
  ** to build a more useful set of components
  ** to refactor your work to be more useful/easier to use




== {cpp} and {cpp}11

* Make CLASSES !!!!
* Make class hierarchies if/when appropriate

== Function/method signatures and reading the documentation!!

* The function/method signature tells you what you need to give the function, or order to use it
* Good documentation should explain what the function/method does and how to use it
* Many libraries provide only C interfaces, even if we're using C++
  ** e.g. SDL and OpenGL

=== SDL_RenderCopy signature

[source, cpp]
----
int SDL_RenderCopy(SDL_Renderer*   renderer,
                   SDL_Texture*    texture,
                   const SDL_Rect* srcrect,
                   const SDL_Rect* dstrect)
----

* What is each parameter?
* What does the `const` do?

https://wiki.libsdl.org/SDL_RenderCopy

=== SDL_GetWindowSize signature

[source, cpp]
----
void SDL_GetWindowSize(SDL_Window* window,
                       int*        w,
                       int*        h)
----

* How does this return data??
  ** the function returns `void` !!!

https://wiki.libsdl.org/SDL_GetWindowSize

=== SDL_GetWindowSize example use

[source, cpp]
----
...
SDL_Window window* SDL_CreateWindow( "title",
  SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
  800, 600,
  SDL_WINDOW_OPENGL);

int width;
int height;
SDL_GetWindowSize(window, &width, &height);
// width and height will now have the appropriate values
----

== Pointers (a quick recap)

* If you're writing C or {cpp} you really need to understand pointers

http://www.cplusplus.com/doc/tutorial/pointers/

=== Problems with Pointers

* Who owns the pointer?
  ** => who deallocates the memory (or should, or shouldn't)
* Pointer arithmetic
* NULL pointers
* Pointer casting

== {cpp}11 ++amp

* {cpp}11 introduced a lot of really useful features
* {cpp}14 and {cpp}17 have continued this trend
* {cpp} now has features similar too those found in "super-high-level" languages
  ** such as C# or Python - http://preshing.com/20141202/cpp-has-become-more-pythonic/

== unique_ptr and shared_ptr

* {cpp}11 introduces the `unique_ptr` and `shared_ptr`amp
  ** these help to reduce pointer-based areas
  ** with ownership

=== unique_ptr

* Manages the storage of a pointer, providing a limited garbage-collection facility, with little to no overhead over built-in pointers (depending on the deleter used).

* These objects have the ability of taking ownership of a pointer: once they take ownership they manage the pointed object by becoming responsible for its deletion at some point.

=== unique_ptr 2

* unique_ptr objects automatically delete the object they manage (using a deleter) as soon as they themselves are destroyed, or as soon as their value changes either by an assignment operation or by an explicit call to unique_ptr::reset.

http://www.cplusplus.com/reference/memory/unique_ptr/

=== shared_ptr

* Manages the storage of a pointer, providing a limited garbage-collection facility, possibly sharing that management with other objects.

* Objects of shared_ptr types have the ability of taking ownership of a pointer and share that ownership: once they take ownership, the group of owners of a pointer become responsible for its deletion when the last one of them releases that ownership.

=== shared_ptr 2

* shared_ptr objects release ownership on the object they co-own as soon as they themselves are destroyed, or as soon as their value changes either by an assignment operation or by an explicit call to shared_ptr::reset. Once all shared_ptr objects that share ownership over a pointer have released this ownership, the managed object is deleted (normally by calling ::delete, but a different deleter may be specified on construction).

http://www.cplusplus.com/reference/memory/shared_ptr/

=== getting real pointers from unique_ptr and shared_ptr

* Many libraries (C or {cpp} libraries) require you to pass normal pointers
* You can `get` normal pointers from unique_ptr and shared_ptr
  ** be careful of ownership now

http://www.cplusplus.com/reference/memory/unique_ptr/get/
http://www.cplusplus.com/reference/memory/shared_ptr/get/

== Range-based for loop (since {cpp}11)

[source, cpp]
----
std::vector<int> v = {0, 1, 2, 3, 4, 5};

for(const int &i : v) // access by const reference
    std::cout << i << ' ';
std::cout << '\n';

for(auto i: v) // access by value, the type of i is int
    std::cout << i << ' ';
std::cout << '\n';
----

http://en.cppreference.com/w/cpp/language/range-for

== References

* https://en.wikipedia.org/wiki/Chuckie_Egg#/media/File:Chuckie_Egg_on_BBC_Micro.jpg[Chuckie Egg screenshot]
