= Games Programming Introduction
:imagesdir: assets
:revealjs_history: true

[.stretch]
image::space-invaders.png[]

== What is this module about?

[.stretch]
image::Chuckie_Egg_on_BBC_Micro.jpg[]

* grounding in the development of games
  ** from the software (programming) perspective
  ** working with other devices/interfaces

== Teaching Style

* Practice-led
  ** lectures will introduce concepts, techniques, things to think about
  ** effective learning will require lots of programming engagement
* Ask questions, query norms
* Discuss with each other
  ** Constructive Critique
* Critique my code too

== Scope

* we'll work on 2D games exclusively
  ** but this content also applies to 3D
  ** 3D requires ideas/tools not covered yet
* building COMPLETE games
* not AAA titles!!

[.stretch]
image::forzaHorizons3.jpg[]

== Disassembling a Game

.Chuckie Egg
[.stretch]
video::J3RgzDaNTac[youtube, options="autoplay,loop"]

== Assignments

* Single, 100% assignment
* Build a complete game that demonstrates both:
  ** Games Programming capabilities (i.e. high quality code)
  ** Specific Games Programming techniques we've covered in class
* Space for personal expression and portfolio

== Workshops

* Sequences of exercises/tutorials
  ** Developing the skills you'll integrate together the your assignment
* You can (should) start the assignment soon

== Module Overview

* Embedded through out
  ** {cpp}, libraries, engines and other languages
  ** Modern {cpp}
  ** Efficiency
  ** Good Programming Practice
  ** Software Engineering Best Practices, e.g.
    *** Versioning
    *** Reading Documentation

== C and {cpp}

* Why are we looking using {cpp} for building games
* Relationship of C and {cpp}

[.stretch]
image::cpp.png[]

== External Libraries

* why we need them
* what they can provide - selecting/locating
* "installing"
* using from {cpp}

[.stretch]
image::Ogg_vorbis_libs_and_application_dia.svg.png[]

== Build Systems

* why to use
* a quick list
* what we'll use

image::cmake.jpg[height=200]
image::conan_small.png[height=200]

== Cross-platform

* libraries
  ** those we're using
  ** alternatives to look at (but NOT use))
  ** doing by hand (platform-specific)
* concerns

== Windows (*not MS Windows* ...)

* creating
* (re)sizing
* moving
* fullscreen

== Logging

* why
  ** vs `printf` or `cout`
  ** why start with logging
* how

== Getting *anything* on-screen

* issues (flicker, tearing, judder)
* techniques
* swap intervals / vsync

[.stretch]
image::Tearing_(simulated).jpg[]

== Time and Time Budgets

* issues related to time
  ** fps, deadlines
  ** latency, jitter
* measuring time
* "hard real-time"

[.stretch]
image::game-loop-timeline.png[caption=http://gameprogrammingpatterns.com/game-loop.html]

== Representing the World

* "Models"
* Game State
* Scene Graphs

.not just this kind of model
[.stretch]
image::base_3d_model__creature_by_tlund.jpg[]

== Simulation

* Movement and basic physics
* Fix your timestep

[.stretch]
image::simulationCar.jpg[]

== Collisions

* Collision detection
* Collision response
* Efficiency
* Spatial Partitioning

[.stretch]
image::Billiards_balls.jpg[]

== Handling input

* keyboard
* mouse
* gamepad
* joystick

[.stretch]
image::Xbox-360-S-Controller.png[]

== Sprites

* loading
* displaying
* moving
* animating

[.stretch]
image::kenny/platformerPack/Player/p1_front.png[]

== On-screen Text

* fonts
* menus

== Sound/Audio

* loading
* playing
* concerns
* sound effects
* streaming
* DSP and spatialisation (3D)

== Stretch content

* multi-threading / parallism
* Determinism (briefly)
* Interpolation
* Networking and multiplayer games
* File formats, serialisation, and compression


== Discussion - Game Design

* What did you design in Game Design last year?
  ** how complex was this?


== Assembling a toolset

* {cpp} (required)
* SDL2 (required)
* Conan.io (required)
* git (recommended)

== Recommended Reading/Resources

* Game engine architecture - Jason Gregory 2014 (physical copies in the library)
* Game programming patterns - Robert Nystrom c2014
  ** free online @ http://gameprogrammingpatterns.com/contents.html (also printed copies in the library)
* SDL game development - Shaun Mitchell 2013 (ebook through library)

Check reading list on Blackboard for complete list

== Blogs etc

* http://ithare.com/[ITHare] http://ithare.com/feed/[RSS feed]
